// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// erDiagram

//     Group ||--o{ GroupTag: has
//     GroupTag }o--|| Tag : has
//     Group ||--o{ Participant : participate
//     Record }o--|| Participant : record
//     Record }o--|| Group : record
//     Participant ||--|| Rank : ranking

model Tag {
  id        Int        @id @default(autoincrement())
  name      String
  groupTags GroupTag[]
}

model Group {
  id                 Int          @id @default(autoincrement())
  ownerParticipant   Participant? @relation("GroupOwner", fields: [ownerParticipantId], references: [id] )
  ownerParticipantId Int
  ownerNickname      String
  ownerPassword      String
  name               String
  description        String
  photoUrl           String
  goalRep            Int
  discordWebhookUrl  String
  discordInviteUrl   String
  badges             String[]
  likeCount          Int
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  participants Participant[]
  groupTags    GroupTag[]
  records      Record[]
}

model GroupTag {
  id      Int   @id @default(autoincrement())
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int
  tag     Tag   @relation(fields: [tagId], references: [id])
  tagId   Int
}

model Participant {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  nickname  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  records     Record[]
  ranks       Rank[]
  groupsOwned Group[] @relation("GroupOwner")
}

model Record {
  id            Int    @id @default(autoincrement())
  exerciseType  String
  description   String
  time          Int
  distance      Int
  photos        String[]
  participant   Participant @relation(fields: [participantId], references: [id])
  participantId Int
  group         Group @relation(fields: [groupId], references: [id])
  groupId       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Rank {
  id            Int    @id @default(autoincrement())
  participant   Participant @relation(fields: [participantId], references: [id])
  participantId Int
  recordCount   Int
  recordTime    Int
}